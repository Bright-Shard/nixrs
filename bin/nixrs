#!/bin/sh

set -e

HELP="\
nixrs
An alternative build system for Rust.

Usage
=====

help, h			Show this help menu.
build, b			Build the current crate.
run, r			Run the current crate.
check, c			View compiler warnings/errors when building the current crate.
clean				Remove build files, then garbage-collect the nix store.
index-sync		Sync crate repository indexes, so nixrs' crate list is up to date
gen-shell		Generate a shell.nix file in the current directory for nixrs
"

ROOT=$(dirname $0)/..
DATA_DIR=/home/${USER}/.local/share/nixrs
CRATES_IO_INDEX=${DATA_DIR}/crates.io-index

export NIX_PATH=$NIX_PATH:nixrs=${DATA_DIR}

if [ ! -d $DATA_DIR ]; then
	if [ -e $DATA_DIR ]; then
		echo "nixrs error: nixrs needs to use the folder '${DATA_DIR}' to store its files, but this path is already taken by another file."
		exit 1
	fi

	mkdir -p $DATA_DIR
fi


cmd=$(echo "$1" | awk '{print tolower($0)}')
crateRoot=$(realpath .)

manageCratesioIndex() {
	# TODO: Don't run this every time nixrs is called. It's a waste of time.
	# It's also painfully slow if the machine is offline.
	if [ ! -d $CRATES_IO_INDEX ]; then
		echo "Downloading crates.io index..."
		git clone --depth 1 https://github.com/rust-lang/crates.io-index $CRATES_IO_INDEX
	else
		echo "Updating crates.io index..."
		cd $CRATES_IO_INDEX
		git pull --depth 1 --rebase --quiet
		cd - > /dev/null
	fi
	echo "Finished syncing crates.io index"
}

findCrateRoot() {
	while [ $crateRoot != "/" ]; do
		if [ $(ls $crateRoot | grep "crate.nix") ]; then
			break
		fi
		crateRoot=$(dirname $crateRoot)
	done

	if [ "$crateRoot" == "/" ]; then
			echo "nixrs error: No \`crate.nix\` found in this folder or any of its parent folders. Is this a nixrs project?"
			exit 2
	fi
}

buildCrate() {
	# TODO find the appropriate time to run this
	# Running every build invokes git and adds several seconds to build times
	# for literally no purpose. But the crates.io index also needs to be
	# up-to-date.
	#manageCratesioIndex

	nix-build "$ROOT/misc/cli.nix" --arg crateRoot $crateRoot --arg registries "{ cratesio = $CRATES_IO_INDEX; }" -o $crateRoot/target --show-trace

	if [ $? != 0 ]; then
		echo "nixrs error: Crate failed to compile."
		exit 3
	fi

	if [ -e $crateRoot/target/rust-project.json ]; then
		ln -sf $crateRoot/target/rust-project.json $crateRoot/rust-project.json
	fi
}

case "$cmd" in
	"run" | "r")
		findCrateRoot
		cratePath=$(buildCrate)
		echo "TODO: Run crate after building"
	;;
	"build" | "b")
		findCrateRoot
		buildCrate
	;;
	"check" | "c")
		findCrateRoot
		echo "TODO: Find crate derivation and list logs"
	;;
	"clean")
		rm -rf $crateRoot/target
		nix-store --gc
	;;
	"help" | "h" | "")
		echo -e "$HELP"
	;;
	"index-sync")
		# TODO non-crates.io repos
		manageCratesioIndex
	;;
	"gen-shell")
		if [ -e shell.nix ]; then
			echo "shell.nix already exists - backing up to shell.bak.nix..."
			mv shell.nix shell.bak.nix
		fi

		cp $ROOT/misc/shell.template.nix shell.nix
	;;
	*)
		echo "nixrs warning: Unknown command \`$cmd\`. Showing help menu."
		echo ""
		echo -e "$HELP"
	;;
esac
